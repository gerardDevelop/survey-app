{"version":3,"sources":["logo.svg","Components/TestComponent.js","Components/Other.js","Components/Survey.js","Components/Tester.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TestComponent","console","log","react_default","a","createElement","className","src","logo","alt","href","target","rel","Component","Other","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","resp","_this2","foo","URLSearchParams","location","search","get","fetch","then","response","json","data","setState","info","catch","error","Survey","surveyId","questions","answers","stockNo","companyId","e","key","answer","value","yesBool","preventDefault","sendAnswers","getSurvey","params","SurveyId","incr","SurveyData","map","question","method","body","JSON","stringify","_this3","type","name","id","onClick","onInputClick","htmlFor","rows","onChange","onTextFieldChange","_this4","getQuestionJSX","bind","onSubmit","Tester","test","fetchResp","testresp","App","Switch","Route","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1be50508.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from '../logo.svg';\nimport '../App.css';\n\n\nclass TestComponent extends Component {\n\n  componentDidMount() {\n    console.log(\"component did mount.\");\n  }\n\n  render() {  \n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n          <a\n            className=\"App-link\"\n            href=\"/survey\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            View survey (for customer)\n          </a>\n\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default TestComponent;","import React, { Component } from 'react';\n\nclass Other extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      resp: null,\n    };\n  }\n  \n  componentDidMount() {\n    console.log(\"on other component did mount\");\n\n    const params = new URLSearchParams(this.props.location.search);\n    const foo = params.get('foo');\n    \n    console.log(\"query param foo = \" + foo);\n\n    fetch('/api')\n      .then(response => response.json())\n      .then(data =>  \n          this.setState({resp : data.info\n      }) ) //this.setState({ data }))\n      .catch(error => console.log(error));\n  }\n\n  render() {\n\n    const params = new URLSearchParams(this.props.location.search);\n    const foo = params.get('foo');\n\n    return (\n      <div>\n        <p>Other component foo = {foo}</p>\n        <p>Data = {this.state.resp}</p>\n      </div>\n    );\n  }\n}\n\nexport default Other;","import React, { Component } from 'react';\n\nclass Survey extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      surveyId : null,\n      questions: [],\n      answers: [],\n      stockNo: null,\n      companyId: null\n    };\n  }\n\n  onTextFieldChange(e, key) {\n    var answers = this.state.answers;\n    answers[key - 1].answer = e.target.value;\n\n    this.setState({\n      answers : answers\n    });\n\n    console.log(\"on text field change\");\n  }\n\n  onInputClick(yesBool, key, e) {\n    console.log(\"value = \" + key + \" is \" + yesBool);\n\n    var answers = this.state.answers;\n    answers[key - 1].answer = yesBool;\n\n    this.setState({\n      answers: answers\n    });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    console.log(\"on submit\");\n\n    console.log(this.state.answers);\n    this.sendAnswers();\n  }\n\n  componentDidMount() {\n    this.getSurvey();\n  }\n\n  getSurvey() {\n    const params = new URLSearchParams(this.props.location.search);\n    const stockNo = params.get('StockNo');\n    const companyId = params.get('CompanyId');\n    const surveyId = params.get('SurveyId');\n\n    console.log(stockNo + \" \" + companyId + \" \" + surveyId);\n\n    if(stockNo && companyId && surveyId) {\n\n    console.log(\"getting survey\");\n\n    fetch('/api/survey?StockNo=' + stockNo + '&CompanyId=' + companyId + '&SurveyId=' + surveyId)\n      .then(response => response.json())\n      .then(data =>  \n        {\n        console.log(data)\n\n        if(data.SurveyId === surveyId) {\n          console.log(\"received survey\");\n\n          var incr = 1;\n          var answers = [];\n\n          var questions = data.SurveyData.map(question => {\n              question.key = incr;\n              answers[incr - 1] = {\n                answer: null\n              };\n              \n              console.log(\"setting key for \" + incr);\n              incr++;\n              return question;\n          });\n          \n          this.setState({\n            surveyId: data.SurveyId,\n            questions: questions,\n            answers : answers,\n            stockNo: stockNo,\n            companyId: companyId\n          });\n        } else {\n          console.log(\"didn't receive survey\");\n        }\n\n        //this.setState({ resp : data.rows }) \n      })\n\n      .catch(error => console.log(error));\n    } else {\n      console.log(\"no id given\");\n    }\n  }\n\n  sendAnswers() {\n    console.log(\"sending answers\");\n    \n    fetch('/api/survey', {\n      method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n      //mode: \"cors\", // no-cors, cors, *same-origin\n      //cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n      //credentials: \"same-origin\", // include, *same-origin, omit\n     // headers: {\n    //      \"Content-Type\": \"application/json\",\n          // \"Content-Type\": \"application/x-www-form-urlencoded\",\n    //  },\n      //redirect: \"follow\", // manual, *follow, error\n      //referrer: \"no-referrer\", // no-referrer, *client\n      body: JSON.stringify({ \n        surveyId: this.state.surveyId,\n        answers: this.state.answers,\n        stockNo: this.state.stockNo,\n        companyId: this.state.companyId\n      }), // body data type must match \"Content-Type\" header\n    })\n    .then(response => (response.json())\n    .then(data => console.log({data}))) // TODO place this in state\n    .catch(error => console.log(error));\n  }\n\n  getQuestionJSX(question) {\n    \n    if(question.type === \"bool\") {\n      return (\n        <div className=\"form-check\" key={question.key}>\n          <label>{question.question}</label><br/>\n          \n          <input className=\"form-check-input\" name={'radio' + question.key} id={'radioyes' + question.key} type=\"radio\" onClick={(e) => this.onInputClick(true, question.key, e)}></input>\n          <label className=\"form-check-label\" htmlFor={'radioyes' + question.key}>Yes</label> <br/>\n          \n          <input className=\"form-check-input\" name={'radio' + question.key} id={'radiono' + question.key} type=\"radio\" onClick={(e) => this.onInputClick(false, question.key, e)}></input>\n          <label className=\"form-check-label\" htmlFor={'radiono' + question.key}>No</label> \n          <p></p>\n        </div>\n      );\n    }\n    else if(question.type === \"text\") {\n\n      return (\n        <div className=\"form-group\" key={question.key}>\n          <label>{question.question}</label><br/>\n          <textarea className=\"form-control\" id=\"exampleFormControlTextarea1\" rows=\"4\" onChange={(e) => {this.onTextFieldChange(e, question.key)}} ></textarea>\n          <p></p>\n        </div>\n      );\n    } else {\n      return null; // or todo some message that the question didn't load properly\n    }\n  }\n\n  render() {\n\n    const getQuestionJSX = this.getQuestionJSX.bind(this);\n\n    return (\n      <div className=\"container\">\n        <form>\n          {this.state.questions.map(question => \n            this.getQuestionJSX(question)\n          )}\n          <button type=\"submit\" className=\"btn btn-primary\" onClick={(e) => this.onSubmit(e)}>Submit</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Survey;","import React, { Component } from 'react';\n\nclass Tester extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      test: 'not set',\n      fetchResp: \"not response yet\"\n    };\n  }\n\n  componentDidMount() {\n\n    const params = new URLSearchParams(this.props.location.search);\n    const id = params.get('id');\n\n    console.log(\"tester query param = \" + id);\n\n    this.setState({test: id});\n    \n    // run a fetch here (todo) based on the passed in query param (id)\n    fetch('/api?id=' + id)\n      .then(response => response.json())\n      .then(data =>  \n          this.setState({fetchResp : data.testresp\n      }) ) //this.setState({ data }))\n      .catch(error => console.log(error));\n    \n  }\n\n  render() {\n\n    console.log(\"rendering here \");\n\n    return(\n      <div>\n        <p>state id: {this.state.test}</p>\n        <p>test resp: {this.state.fetchResp}</p>\n      </div>\n    );       \n  }\n}\n\nexport default Tester;","import React, { Component } from 'react';\nimport './App.css';\nimport TestComponent from './Components/TestComponent';\nimport Other from './Components/Other';\nimport Survey from './Components/Survey';\nimport Tester from './Components/Tester';\nimport { Route, Switch } from 'react-router-dom';\n\nclass App extends Component {\n\n  render() {\n    const appContents = (\n      <div>\n        \n      </div>);\n\n    return (\n      <Switch>\n          <Route exact path=\"/\" component={TestComponent}></Route>\n          <Route exact path=\"/other\" component={Other}></Route>\n          <Route exact path=\"/survey\" component={Survey}></Route>\n          <Route exact path=\"/tester\" component={Tester}></Route>\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render((\n\t<Router>\n\t\t<App />\n\t</Router>\n\t), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}