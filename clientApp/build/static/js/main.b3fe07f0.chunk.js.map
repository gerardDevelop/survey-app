{"version":3,"sources":["logo.svg","Components/TestComponent.js","Components/TokenSurvey2.js","Components/TestLayout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TestComponent","console","log","react_default","a","createElement","className","href","target","rel","Component","TokenSurvey2","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","surveyId","questions","answers","stockNo","companyId","token","currentIncr","vehicleName","error","errorMsg","showQuestion","submissionSuccessful","e","answer","value","setState","yesBool","incr","length","preventDefault","sendAnswers","getSurvey","_this2","URLSearchParams","location","search","get","fetch","then","response","json","data","completed","map","question","key","vehicle","make","catch","_this3","method","mode","cache","credentials","headers","Content-Type","referrer","body","JSON","stringify","msg","_this4","currentQuestion","Fragment","input","type","Button","color","size","onClick","onInputClick","id","rows","onChange","onTextFieldChange","onSubmit","Alert","questionContent","TestLayout","App","Switch","Route","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b3fe07f0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from '../logo.svg';\nimport '../App.css';\n\n\nclass TestComponent extends Component {\n\n  componentDidMount() {\n    console.log(\"component did mount.\");\n  }\n\n  render() {  \n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n\n          <a\n            className=\"App-link\"\n            href=\"/survey?token=303d1eb2-ddb8-486c-a823-02af2365beb6\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            View survey (for customer)\n          </a>\n\n          <a\n            className=\"App-link\"\n            href=\"/survey2?token=303d1eb2-ddb8-486c-a823-02af2365beb6\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            View survey 2 (for customer)\n          </a>\n\n          <a\n            className=\"App-link\"\n            href=\"/testLayout\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            View testlayout\n          </a>\n\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default TestComponent;","import React, { Component, useEffect } from 'react';\nimport '../css/spinner.css';\n\nimport { Alert, Button, Badge } from 'reactstrap'; \n\nclass TokenSurvey2 extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      surveyId : null,\n      questions: [],\n      answers: [],\n      stockNo: null,\n      companyId: null,\n      token: null,\n      currentIncr: 0,\n      vehicleName: \"\",\n      error: false,\n      errorMsg: \"\",\n      \n      showQuestion: true,\n\n      submissionSuccessful: false\n    };\n  }\n\n  onTextFieldChange(e) {\n    var answers = this.state.answers;\n    answers[this.state.currentIncr].answer = e.target.value;\n\n    this.setState({\n      answers : answers\n    });\n\n    console.log(\"on text field change\");\n  }\n\n  onInputClick(yesBool, e) {\n    console.log(\"value = \" + this.state.currentIncr + \" is \" + yesBool);\n\n\n\n    var answers = this.state.answers;\n    answers[this.state.currentIncr].answer = yesBool;\n\n    var incr = this.state.currentIncr;\n\n    if(incr < this.state.questions.length - 1) {\n      incr = incr + 1;\n    }\n\n    this.setState({\n      answers: answers,\n      currentIncr: incr,\n      showQuestion: false\n    });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    console.log(\"on submit\");\n\n    console.log(this.state.answers);\n    this.sendAnswers();\n  }\n\n  componentDidMount() {\n      this.getSurvey();\n  }\n\n  componentDidUpdate() {\n    \n    \n    if(!this.state.showQuestion) {\n      this.setState({\n        showQuestion : true\n      });\n    }\n  }\n\n  getSurvey() {\n    const params = new URLSearchParams(this.props.location.search);\n    //const stockNo = params.get('StockNo');\n    //const companyId = params.get('CompanyId');\n    //const surveyId = params.get('SurveyId');\n\n    const token = params.get('token');\n\n    console.log(\"token: \" + token);\n\n    if(token) {\n\n    this.setState({\n      token: token\n    });\n\n    console.log(\"getting survey\");\n\n    fetch('/api/tokenSurvey?token=' + token)\n      .then(response => response.json())\n      .then(data =>  {\n  \n        console.log(data)\n\n        \n\n        if(data && !data.completed) {\n          console.log(\"received survey\");\n\n          var incr = 1;\n          var answers = [];\n\n          var questions = data.questions.map(question => {\n              question.key = incr;\n              answers[incr - 1] = {\n                answer: null\n              };\n              \n              console.log(\"setting key for \" + incr);\n              incr++;\n              return question;\n          });\n          \n          this.setState({\n            //surveyId: data.SurveyId,\n            questions: questions,\n            answers : answers,\n            vehicleName: \" for \" + data.vehicle.make,\n            //stockNo: stockNo,\n            //companyId: companyId\n          });\n        } else if(data.completed) {\n          console.log(\"Survey has already been completed\");\n          this.setState({\n            error: true,\n            errorMsg: \"Error: Survey has already been completed\"\n          });\n          // disable interface, etc and display message\n        } else {\n          console.log(\"didn't receive survey\");\n        }\n\n        //this.setState({ resp : data.rows }) \n      })\n      .catch(error => \n        {\n          // make a change to state here\n          this.setState({\n            error: true,\n            errorMsg: \"Error: Could not find survey\"\n          });\n          console.log(error);\n        });\n       \n    } else {\n      console.log(\"no id given\");\n    }\n  }\n\n  sendAnswers() {\n    console.log(\"sending answers\");\n    \n    fetch('/api/tokenSurvey', {\n      method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n      mode: \"cors\", // no-cors, cors, *same-origin\n      cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: \"same-origin\", // include, *same-origin, omit\n      headers: {\n         \"Content-Type\": \"application/json\",\n         //\"Content-Type\": \"application/x-www-form-urlencoded\",\n      },\n      //redirect: \"follow\", // manual, *follow, error\n      referrer: \"no-referrer\", // no-referrer, *client\n      body: JSON.stringify({ \n\n        /*\n        surveyId: this.state.surveyId,\n        answers: this.state.answers,\n        stockNo: this.state.stockNo,\n        companyId: this.state.companyId\n        */\n\n        token: this.state.token,\n        answers: this.state.answers\n\n      }), // body data type must match \"Content-Type\" header\n    })\n    .then(response => response.json())\n    .then(data => {\n      console.log(\"received resp \" + data.msg)\n\n      if(data.msg == \"success\") {\n        // display thank you message to user\n        this.setState({\n          submissionSuccessful: true\n        });\n      }\n    });\n      \n      \n      /*\n      (response.json())\n    .then(data => console.log({data}))) // TODO place this in state\n    .catch(error => console.log(error));\n    */\n  }\n\n  render() {\n\n    const initialQuestion = (\n      <button>Start Survey?</button>\n    );\n\n    // question should generate 1 question at a time, and use some incrementor variable to track the current question\n    // to be shown\n\n    var question = (<></>);\n\n    /* -- radio buttons -- \n\n      <div className=\"ml-3\">\n          <input className=\"form-check-input\" name={'radio'} id={'radioyes'} type=\"radio\" onClick={(e) => this.onInputClick(true, e)}></input>\n          <label className=\"form-check-label\" htmlFor={'radioyes'}>Yes</label> <br/>  \n          <input className=\"form-check-input\" name={'radio'} id={'radiono'} type=\"radio\" onClick={(e) => this.onInputClick(false, e)}></input>\n          <label className=\"form-check-label\" htmlFor={'radiono'}>No</label>     \n          </div>\n    */\n\n      var currentQuestion = (<></>);\n      var input = (<></>);\n\n    if(!this.state.error && this.state.questions.length > 0) {    \n\n      currentQuestion = this.state.questions[this.state.currentIncr];\n      input = null;\n\n      if(currentQuestion.type === \"bool\") {\n        input = (\n          <>\n            <Button color=\"secondary\" size=\"lg\" onClick={(e) => this.onInputClick(false, e)}>No</Button>{' '}\n            <Button color=\"primary\" size=\"lg\" onClick={(e) => this.onInputClick(true, e)}>Yes</Button>\n          </>  \n        );\n      } else if(currentQuestion.type === \"text\") {\n        input = (\n          <div>\n           <div className=\"d-flex justify-content-center mt-3\">\n              <textarea className=\"form-control\" id=\"exampleFormControlTextarea1\" rows=\"4\" onChange={(e) => {this.onTextFieldChange(e)}} ></textarea>\n            </div><p></p>\n            <div className=\"d-flex justify-content-center mt-3\">\n            <Button color=\"primary\" size=\"lg\" onClick={(e) => this.onSubmit(e)} className=\"mt-2\">Submit</Button>\n            </div>\n          </div>\n        );\n      }\n\n      //var currentQuestion = this.state.questions[this.state.currentIncr].question;\n\n      question = (<>\n        <p>{currentQuestion.question}</p>\n        {input}\n      </>);\n    }\n\n    if(!this.state.error) {\n      \n      /*\n      return ( \n        <div className=\"container\">\n        <div className=\"d-flex justify-content-center\">\n          {mainCard}\n          </div>\n          <div className=\"d-flex justify-content-center\">\n          <div className=\"card\">\n            <div className=\"card-body\">\n            <p>{currentQuestion.question}</p>\n            </div>\n            \n          </div>\n          </div>\n          <div className=\"d-flex justify-content-center mt-3\">\n        {input}\n          </div>\n        </div>\n      );\n      */\n\n        var questionContent = (<></>);\n          \n        if(this.state.submissionSuccessful) {\n          questionContent = (\n            <Alert color=\"primary\" className=\"mt-3\">\n              {\"Survey successfully submitted. Thank you for your time!\"}\n            </Alert>);\n        } else if(this.state.showQuestion) {\n          questionContent = (\n            <>\n            <Alert color=\"primary\" className=\"mt-3\">\n              {currentQuestion.question}\n            </Alert>\n            <div className=\"centered\">\n            {input}\n            </div>\n            </>\n            );\n        } \n\n        \n\n\n        return (\n          <div className=\"container\">\n            <h1>Survey{this.state.vehicleName}</h1>\n\n            {questionContent}\n            \n          </div>\n        );\n\n    } else {  // todo center the <p> text here\n\n\n\n      return (\n        <div className=\"container\">\n          <Alert color=\"danger\" className=\"mt-5\">\n            {this.state.errorMsg}\n          </Alert>\n        </div>   \n      );\n    }\n\n    \n\n    \n  }\n}\n\nexport default TokenSurvey2;","import React, { Component } from 'react';\n\nclass TestLayout extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <p>Content here</p>\n      </div>\n    );\n  }  \n}\n\nexport default TestLayout;","import React, { Component } from 'react';\nimport './App.css';\nimport TestComponent from './Components/TestComponent';\nimport TokenSurvey2 from './Components/TokenSurvey2';\nimport TestLayout from './Components/TestLayout';\nimport { Route, Switch } from 'react-router-dom';\n\n/*\n  TODO - add admin dashboard component\n*/\n\nclass App extends Component {\n\n  render() {\n    const appContents = (\n      <div>\n        \n      </div>);\n\n    return (\n      <Switch>\n          <Route exact path=\"/\" component={TestComponent}></Route>\n          <Route exact path=\"/survey\" component={TokenSurvey2}></Route>\n          <Route exact path=\"/testlayout\" component={TestLayout}></Route>\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render((\n\t<Router>\n\t\t<App />\n\t</Router>\n\t), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}